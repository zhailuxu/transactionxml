<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd   
	                    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd   
	                    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd   
	                    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- (1) 数据源 -->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<property name="driverClassName"
			value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://127.0.0.1:3306/test" />
		<property name="username" value="root" />
		<property name="password" value="123456" />
		<property name="maxWait" value="3000" />
		<property name="maxActive" value="28" />
		<property name="initialSize" value="2" />
		<property name="minIdle" value="0" />
		<property name="timeBetweenEvictionRunsMillis" value="300000" />
		<property name="testOnBorrow" value="false" />
		<property name="testWhileIdle" value="true" />
		<property name="validationQuery" value="select 1 from dual" />
		<property name="filters" value="stat" />
	</bean>

	<!-- (2) session工厂 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="mapperLocations"
			value="classpath*:mapper/*Mapper*.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- (3) 配置扫描器，扫描指定路径的mapper生成数据库操作代理类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="annotationClass"
			value="javax.annotation.Resource"></property>
		<property name="basePackage" value="com.zlx.user.dal.sqlmap" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<!-- (4) 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- (5)该配置创建了一个TransactionInterceptor的bean，作为事务切面的执行方法 -->
	 <tx:advice id="defaultTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice> 

	<!-- (6) 该配置创建了一个类型为DefaultBeanFactoryPointcutAdvisor的bean，该bean是一个advisor,里面包含了pointcut和advice。pointcut说明切面加在哪里，advice说明具体执行逻辑。此处可以配多个advisor -->
	 <aop:config>
		<aop:pointcut id="myCut"
			expression="(execution(* *..*BoImpl.*(..))) " />
		<aop:advisor pointcut-ref="myCut"
			advice-ref="defaultTxAdvice" />
	</aop:config> 

	<!-- (7) 声明使用注解式事务 -->
	<tx:annotation-driven
		transaction-manager="transactionManager" />

	<!-- (8) 注册各种beanfactory处理器 -->
<!-- 	<context:annotation-config />
 -->
</beans>